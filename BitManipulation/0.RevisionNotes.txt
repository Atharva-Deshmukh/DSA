  --------------------------------------------Topics to revise--------------------------------------------
- 4. BK Algo
- 11. Set bits from 1-N Logic

  concept of buckets in single number 2 problem

  To separate two numbers from XOR (bucket in single number 3)
  --------------------------------------------CONCEPTS HERE ITSELF--------------------------------------------

  EVEN-ODD:
  - check last bit --> return Boolean(n&1);

  NO OF BITS in n:
  - return (Math.floor(Math.log2(n)) + 1);

  CHECK FOR POWER OF 2:
  - has only 1 bit
  -  return ((n > 0) & (n & (n-1)) === 0);

  COUNT SET BITS: 
  - Revise full Q4
  - Recursion and BK 
  
  SET kth bit: (k = 1st, second i.e. absolute position)
  - return ((1 << (k - 1)) | n)  
  - OR used since 0 -> 1 and 1 -> 1

  TOGGLE kth bit: (k = 1st, second i.e. absolute position)
  - return ((1 << (k - 1)) ^ n)  
  - XOR used since 0 -> 1 and 1 -> 0

  REMOVE LAST SET BIT
  - return (n & (n - 1))  

  POSITION OF RIGHTMOST SET BIT
  - return Math.log2((n & (n - 1)) ^ n)  

  CLEAR kth bit
  - return (n & ~ (1 << (k - 1)))  

  THOUGH PROCESS for getting highest power of 2 till N (from 1 - N)

        3 2 1 0
    9 - 1 0 0 1         pos of MSB = 4, highest power of 2 = 3 = pos - 1

        3 2 1 0
    5 - 0 1 0 1         pos of MSB = 3, highest power of 2 = 2 = pos - 1

        3 2 1 0
    3 - 0 0 1 1         pos of MSB = 2, highest power of 2 = 1 = pos - 1 

    highest pow of 2 = (Position of MSB - 1)